// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SIS.Persistence.Databases.Contexts.Data;

#nullable disable

namespace SIS.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("UserAccountSequence");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8a6a4eca-1d33-4b46-b32b-4292437052a2",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "e9b49be3-026a-45f9-9913-a56568cd5f76",
                            Name = "Lecturer",
                            NormalizedName = "LECTURER"
                        },
                        new
                        {
                            Id = "806cb1e6-854d-4179-8585-2676d288d1e9",
                            Name = "Advisor",
                            NormalizedName = "ADVISOR"
                        },
                        new
                        {
                            Id = "bff3d5e8-7518-4a75-a34e-9e14fa53e37b",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "640a679e-05b9-4b74-af81-9f6110ee5c3c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SIS.Domain.Entities.ClassDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Day")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NumberOfClasses")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("Day", "Time", "NumberOfClasses")
                        .IsUnique()
                        .HasFilter("[Day] IS NOT NULL");

                    b.ToTable("ClassDates");
                });

            modelBuilder.Entity("SIS.Domain.Entities.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CourseId");

                    b.HasIndex("CourseName")
                        .IsUnique();

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("SIS.Domain.Entities.CourseClass", b =>
                {
                    b.Property<int>("CourseClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseClassID"));

                    b.Property<int>("AKTS")
                        .HasColumnType("int");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FinalValue")
                        .HasColumnType("int");

                    b.Property<int>("HourPerWeek")
                        .HasColumnType("int");

                    b.Property<int>("Kredi")
                        .HasColumnType("int");

                    b.Property<string>("LecturerTC")
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("MidTermValue")
                        .HasColumnType("int");

                    b.Property<int>("SchoolYear")
                        .HasColumnType("int");

                    b.HasKey("CourseClassID");

                    b.HasIndex("LecturerTC");

                    b.HasIndex("CourseCode", "SchoolYear")
                        .IsUnique();

                    b.ToTable("CourseClasses");
                });

            modelBuilder.Entity("SIS.Domain.Entities.CourseClassDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassDateId")
                        .HasColumnType("int");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SchoolYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassDateId");

                    b.HasIndex("CourseCode", "SchoolYear", "ClassDateId")
                        .IsUnique();

                    b.ToTable("CourseClassDates");
                });

            modelBuilder.Entity("SIS.Domain.Entities.CourseDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CourseContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(1);

                    b.Property<string>("CourseType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CourseDetails");
                });

            modelBuilder.Entity("SIS.Domain.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CourseSelectionEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CourseSelectionStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(2);

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<int>("FloorNumber")
                        .HasColumnType("int");

                    b.Property<string>("HeadOfDepartmentTC")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("MaxYears")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfSemesters")
                        .HasColumnType("int");

                    b.HasKey("DepartmentId");

                    b.HasIndex("DepCode")
                        .IsUnique()
                        .HasFilter("[DepCode] IS NOT NULL");

                    b.HasIndex("DepartmentName")
                        .IsUnique();

                    b.HasIndex("FacultyName");

                    b.HasIndex("HeadOfDepartmentTC")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("SIS.Domain.Entities.DepartmentCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CourseDetailsId")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(2);

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaughtSemester")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseCode")
                        .IsUnique();

                    b.HasIndex("CourseDetailsId");

                    b.HasIndex("CourseName");

                    b.HasIndex("DepartmentName", "CourseName", "TaughtSemester")
                        .IsUnique();

                    b.ToTable("DepartmentCourses");
                });

            modelBuilder.Entity("SIS.Domain.Entities.DocumentRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DocumentLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<DateOnly>("RequestDate")
                        .HasColumnType("date");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("TC");

                    b.ToTable("DocumentRequests");
                });

            modelBuilder.Entity("SIS.Domain.Entities.Faculty", b =>
                {
                    b.Property<int>("FacultyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacultyID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeanTC")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(2);

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UniName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FacultyID");

                    b.HasIndex("Address")
                        .IsUnique();

                    b.HasIndex("DeanTC")
                        .IsUnique();

                    b.HasIndex("FacultyName")
                        .IsUnique();

                    b.HasIndex("Mail")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("WebSite")
                        .IsUnique();

                    b.HasIndex("UniName", "FacultyName")
                        .IsUnique();

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("SIS.Domain.Entities.LecturerDepDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HoursPerWeek")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasAlternateKey("DepartmentName", "TC");

                    b.HasIndex("TC", "DepartmentName")
                        .IsUnique();

                    b.ToTable("LecturerDepDetails");
                });

            modelBuilder.Entity("SIS.Domain.Entities.SemesterDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicYear")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NumberOfObligatoryCourses")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfSelectiveCourses")
                        .HasColumnType("int");

                    b.Property<int>("SelectiveCourseACTS")
                        .HasColumnType("int");

                    b.Property<int>("SelectiveCourseKredi")
                        .HasColumnType("int");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<int>("TotalCourses")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentName", "Semester")
                        .IsUnique();

                    b.ToTable("SemesterDetails");
                });

            modelBuilder.Entity("SIS.Domain.Entities.StudentCourseDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("AttendanceFulfilled")
                        .HasColumnType("bit");

                    b.Property<int?>("Complement")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ComplementAnnouncment")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("ComplementRight")
                        .HasColumnType("bit");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(2);

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<int?>("Final")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FinalAnnouncment")
                        .HasColumnType("datetime2");

                    b.Property<float?>("Grade")
                        .HasColumnType("real");

                    b.Property<int?>("MidTerm")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MidTermAnnouncment")
                        .HasColumnType("datetime2");

                    b.Property<int>("SchoolYear")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("CourseCode", "SchoolYear");

                    b.HasIndex("DepartmentName", "TC");

                    b.ToTable("StudentsCourseDetails");
                });

            modelBuilder.Entity("SIS.Domain.Entities.StudentCourseSelect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CourseCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentName", "TC", "CourseCode")
                        .IsUnique()
                        .HasFilter("[DepartmentName] IS NOT NULL AND [TC] IS NOT NULL AND [CourseCode] IS NOT NULL");

                    b.ToTable("StudentSelectedCourses");
                });

            modelBuilder.Entity("SIS.Domain.Entities.StudentCourseSelection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentName", "TC")
                        .IsUnique();

                    b.ToTable("StudentCourseSelections");
                });

            modelBuilder.Entity("SIS.Domain.Entities.StudentDepDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentAKTS")
                        .HasColumnType("int");

                    b.Property<int>("CurrentSchoolYear")
                        .HasColumnType("int");

                    b.Property<int>("CurrentSemester")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(2);

                    b.Property<float?>("Gno")
                        .HasColumnType("real");

                    b.Property<DateOnly>("RegistrationDate")
                        .HasColumnType("date");

                    b.Property<string>("StudentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnOrder(1);

                    b.Property<int>("TotalAKTS")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TC", "DepartmentName")
                        .IsUnique();

                    b.ToTable("StudentsDepDetails");
                });

            modelBuilder.Entity("SIS.Domain.Entities.University", b =>
                {
                    b.Property<int>("UniversityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UniversityId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CurrentSchoolYear")
                        .HasColumnType("int");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RectorTC")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UniversityId");

                    b.HasIndex("Address")
                        .IsUnique();

                    b.HasIndex("Mail")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("RectorTC")
                        .IsUnique();

                    b.HasIndex("WebSite")
                        .IsUnique();

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("SIS.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SIS.Domain.Entities.UserAccount", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("NEXT VALUE FOR [UserAccountSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("AccountId"));

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnOrder(4);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<int>("ID")
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasColumnOrder(6);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3);

                    b.Property<string>("PersonalMail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("RegisterDate")
                        .HasColumnType("date")
                        .HasColumnOrder(5);

                    b.Property<string>("SchoolMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnOrder(1);

                    b.HasKey("AccountId");

                    b.HasAlternateKey("ID");

                    b.HasIndex("ID")
                        .IsUnique();

                    b.HasIndex("PersonalMail")
                        .IsUnique()
                        .HasFilter("[PersonalMail] IS NOT NULL");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasFilter("[Phone] IS NOT NULL");

                    b.HasIndex("SchoolMail")
                        .IsUnique();

                    b.ToTable("UserAccount");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("SIS.Domain.Entities.AdministratorAccount", b =>
                {
                    b.HasBaseType("SIS.Domain.Entities.UserAccount");

                    b.ToTable("AdministratorAccounts");
                });

            modelBuilder.Entity("SIS.Domain.Entities.AdvisorAccount", b =>
                {
                    b.HasBaseType("SIS.Domain.Entities.UserAccount");

                    b.ToTable("AdvisorAccounts");
                });

            modelBuilder.Entity("SIS.Domain.Entities.LecturerAccount", b =>
                {
                    b.HasBaseType("SIS.Domain.Entities.UserAccount");

                    b.Property<string>("CurrentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TotalWorkHours")
                        .HasColumnType("real");

                    b.ToTable("LecturerAccounts");
                });

            modelBuilder.Entity("SIS.Domain.Entities.StudentAccount", b =>
                {
                    b.HasBaseType("SIS.Domain.Entities.UserAccount");

                    b.Property<string>("CurrentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("StudentAccounts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SIS.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SIS.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIS.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SIS.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SIS.Domain.Entities.CourseClass", b =>
                {
                    b.HasOne("SIS.Domain.Entities.DepartmentCourse", "DepartmentCourse")
                        .WithMany("CourseClasses")
                        .HasForeignKey("CourseCode")
                        .HasPrincipalKey("CourseCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIS.Domain.Entities.LecturerAccount", "LecturerDetails")
                        .WithMany("Courses")
                        .HasForeignKey("LecturerTC")
                        .HasPrincipalKey("TC")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DepartmentCourse");

                    b.Navigation("LecturerDetails");
                });

            modelBuilder.Entity("SIS.Domain.Entities.CourseClassDate", b =>
                {
                    b.HasOne("SIS.Domain.Entities.ClassDate", "ClassDate")
                        .WithMany("CourseClassDates")
                        .HasForeignKey("ClassDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIS.Domain.Entities.CourseClass", "CourseClass")
                        .WithMany("CourseClassDates")
                        .HasForeignKey("CourseCode", "SchoolYear")
                        .HasPrincipalKey("CourseCode", "SchoolYear")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassDate");

                    b.Navigation("CourseClass");
                });

            modelBuilder.Entity("SIS.Domain.Entities.Department", b =>
                {
                    b.HasOne("SIS.Domain.Entities.Faculty", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyName")
                        .HasPrincipalKey("FacultyName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIS.Domain.Entities.User", "HeadOfDepartment")
                        .WithOne("Department")
                        .HasForeignKey("SIS.Domain.Entities.Department", "HeadOfDepartmentTC")
                        .HasPrincipalKey("SIS.Domain.Entities.User", "UserName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("HeadOfDepartment");
                });

            modelBuilder.Entity("SIS.Domain.Entities.DepartmentCourse", b =>
                {
                    b.HasOne("SIS.Domain.Entities.CourseDetails", "CourseDetails")
                        .WithMany("DepartmentCourses")
                        .HasForeignKey("CourseDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIS.Domain.Entities.Course", "Course")
                        .WithMany("DepartmentCourses")
                        .HasForeignKey("CourseName")
                        .HasPrincipalKey("CourseName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIS.Domain.Entities.Department", "Department")
                        .WithMany("DepartmentCourses")
                        .HasForeignKey("DepartmentName")
                        .HasPrincipalKey("DepartmentName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("CourseDetails");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("SIS.Domain.Entities.DocumentRequest", b =>
                {
                    b.HasOne("SIS.Domain.Entities.User", "User")
                        .WithMany("RequestedDocuments")
                        .HasForeignKey("TC")
                        .HasPrincipalKey("UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SIS.Domain.Entities.Faculty", b =>
                {
                    b.HasOne("SIS.Domain.Entities.User", "Dean")
                        .WithOne("Faculty")
                        .HasForeignKey("SIS.Domain.Entities.Faculty", "DeanTC")
                        .HasPrincipalKey("SIS.Domain.Entities.User", "UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIS.Domain.Entities.University", "University")
                        .WithMany("Faculties")
                        .HasForeignKey("UniName")
                        .HasPrincipalKey("Name")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dean");

                    b.Navigation("University");
                });

            modelBuilder.Entity("SIS.Domain.Entities.LecturerDepDetails", b =>
                {
                    b.HasOne("SIS.Domain.Entities.Department", "Department")
                        .WithMany("LecturerDepDetails")
                        .HasForeignKey("DepartmentName")
                        .HasPrincipalKey("DepartmentName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIS.Domain.Entities.LecturerAccount", "Lecturer")
                        .WithMany("LecturerDepDetails")
                        .HasForeignKey("TC")
                        .HasPrincipalKey("TC")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("SIS.Domain.Entities.SemesterDetail", b =>
                {
                    b.HasOne("SIS.Domain.Entities.Department", "Department")
                        .WithMany("SemestersDetails")
                        .HasForeignKey("DepartmentName")
                        .HasPrincipalKey("DepartmentName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("SIS.Domain.Entities.StudentCourseDetails", b =>
                {
                    b.HasOne("SIS.Domain.Entities.CourseClass", "CourseClass")
                        .WithMany("StudentsCourseDetails")
                        .HasForeignKey("CourseCode", "SchoolYear")
                        .HasPrincipalKey("CourseCode", "SchoolYear")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SIS.Domain.Entities.StudentDepDetails", "StudentDetails")
                        .WithMany("StudentCoursesDetails")
                        .HasForeignKey("DepartmentName", "TC")
                        .HasPrincipalKey("DepartmentName", "TC")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CourseClass");

                    b.Navigation("StudentDetails");
                });

            modelBuilder.Entity("SIS.Domain.Entities.StudentCourseSelect", b =>
                {
                    b.HasOne("SIS.Domain.Entities.StudentCourseSelection", "StudentCourseSelection")
                        .WithMany("SelectedCourses")
                        .HasForeignKey("DepartmentName", "TC")
                        .HasPrincipalKey("DepartmentName", "TC")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentCourseSelection");
                });

            modelBuilder.Entity("SIS.Domain.Entities.StudentCourseSelection", b =>
                {
                    b.HasOne("SIS.Domain.Entities.StudentDepDetails", "StudentDepDetails")
                        .WithOne("StudentCourseSelection")
                        .HasForeignKey("SIS.Domain.Entities.StudentCourseSelection", "DepartmentName", "TC")
                        .HasPrincipalKey("SIS.Domain.Entities.StudentDepDetails", "DepartmentName", "TC")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentDepDetails");
                });

            modelBuilder.Entity("SIS.Domain.Entities.StudentDepDetails", b =>
                {
                    b.HasOne("SIS.Domain.Entities.Department", "Department")
                        .WithMany("StudentDepDetails")
                        .HasForeignKey("DepartmentName")
                        .HasPrincipalKey("DepartmentName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIS.Domain.Entities.StudentAccount", "StudentAccount")
                        .WithMany("StudentDepDetails")
                        .HasForeignKey("TC")
                        .HasPrincipalKey("TC")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("StudentAccount");
                });

            modelBuilder.Entity("SIS.Domain.Entities.University", b =>
                {
                    b.HasOne("SIS.Domain.Entities.User", "Rector")
                        .WithOne("University")
                        .HasForeignKey("SIS.Domain.Entities.University", "RectorTC")
                        .HasPrincipalKey("SIS.Domain.Entities.User", "UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rector");
                });

            modelBuilder.Entity("SIS.Domain.Entities.UserAccount", b =>
                {
                    b.HasOne("SIS.Domain.Entities.User", "User")
                        .WithOne("UserAccount")
                        .HasForeignKey("SIS.Domain.Entities.UserAccount", "TC")
                        .HasPrincipalKey("SIS.Domain.Entities.User", "UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SIS.Domain.Entities.ClassDate", b =>
                {
                    b.Navigation("CourseClassDates");
                });

            modelBuilder.Entity("SIS.Domain.Entities.Course", b =>
                {
                    b.Navigation("DepartmentCourses");
                });

            modelBuilder.Entity("SIS.Domain.Entities.CourseClass", b =>
                {
                    b.Navigation("CourseClassDates");

                    b.Navigation("StudentsCourseDetails");
                });

            modelBuilder.Entity("SIS.Domain.Entities.CourseDetails", b =>
                {
                    b.Navigation("DepartmentCourses");
                });

            modelBuilder.Entity("SIS.Domain.Entities.Department", b =>
                {
                    b.Navigation("DepartmentCourses");

                    b.Navigation("LecturerDepDetails");

                    b.Navigation("SemestersDetails");

                    b.Navigation("StudentDepDetails");
                });

            modelBuilder.Entity("SIS.Domain.Entities.DepartmentCourse", b =>
                {
                    b.Navigation("CourseClasses");
                });

            modelBuilder.Entity("SIS.Domain.Entities.Faculty", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("SIS.Domain.Entities.StudentCourseSelection", b =>
                {
                    b.Navigation("SelectedCourses");
                });

            modelBuilder.Entity("SIS.Domain.Entities.StudentDepDetails", b =>
                {
                    b.Navigation("StudentCourseSelection");

                    b.Navigation("StudentCoursesDetails");
                });

            modelBuilder.Entity("SIS.Domain.Entities.University", b =>
                {
                    b.Navigation("Faculties");
                });

            modelBuilder.Entity("SIS.Domain.Entities.User", b =>
                {
                    b.Navigation("Department");

                    b.Navigation("Faculty");

                    b.Navigation("RequestedDocuments");

                    b.Navigation("University");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("SIS.Domain.Entities.LecturerAccount", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("LecturerDepDetails");
                });

            modelBuilder.Entity("SIS.Domain.Entities.StudentAccount", b =>
                {
                    b.Navigation("StudentDepDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
